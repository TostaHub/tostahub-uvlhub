# Generated by Selenium IDE
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait

from core.environment.host import get_host_for_selenium_testing
from core.selenium.common import initialize_driver, close_driver
import time


def wait_for_page_to_load(driver, timeout=4):
    WebDriverWait(driver, timeout).until(
        lambda driver: driver.execute_script("return document.readyState") == "complete"
    )


def wait_datasets_to_change():
    # There is no real alternative to this
    time.sleep(0.5)


def set_input(driver, input, value):
    query_field = driver.find_element(By.ID, input)

    driver.execute_script("""
        arguments[0].value = arguments[1];
        arguments[0].dispatchEvent(new Event('input', { bubbles: true }));
    """, query_field, value)


def set_checkbox(driver, input, value):
    query_field = driver.find_element(By.ID, input)

    driver.execute_script("""
        arguments[0].checked = arguments[1];
        arguments[0].dispatchEvent(new Event('input', { bubbles: true }));
    """, query_field, value)


def check_num_datasets(driver, expected):
    wait_datasets_to_change()
    datasets = driver.find_element(By.ID, "results").find_elements(By.XPATH, "./*")
    assert len(datasets) == expected, f"Expected {expected} datasets but found {len(datasets)}"


def test_query():
    driver = initialize_driver()
    host = get_host_for_selenium_testing()

    driver.get(f'{host}/explore')
    wait_for_page_to_load(driver)

    set_input(driver, "query", "sample dataset 1")
    check_num_datasets(driver, 1)

    set_input(driver, "query", "sample dataset 2")
    check_num_datasets(driver, 1)

    set_input(driver, "query", "sample dataset 3")
    check_num_datasets(driver, 1)

    set_input(driver, "query", "sample dataset 4")
    check_num_datasets(driver, 1)

    set_input(driver, "query", "tag1")
    check_num_datasets(driver, 2)

    close_driver(driver)


def test_author_filter():
    driver = initialize_driver()
    host = get_host_for_selenium_testing()

    driver.get(f'{host}/explore')
    wait_for_page_to_load(driver)

    set_input(driver, "query", "author:Author 4")
    check_num_datasets(driver, 1)

    set_input(driver, "query", "author:Author")
    check_num_datasets(driver, 4)

    set_input(driver, "query", "author:Nonexistent Author")
    check_num_datasets(driver, 0)

    close_driver(driver)


def test_size_filters():
    driver = initialize_driver()
    host = get_host_for_selenium_testing()

    driver.get(f'{host}/explore')
    wait_for_page_to_load(driver)

    set_input(driver, "query", "min_size:1000")
    check_num_datasets(driver, 3)

    set_input(driver, "query", "max_size:2000")
    check_num_datasets(driver, 4)

    set_input(driver, "query", "min_size:500;max_size:1000")
    check_num_datasets(driver, 1)

    close_driver(driver)


def test_tags_filter():
    driver = initialize_driver()
    host = get_host_for_selenium_testing()

    driver.get(f'{host}/explore')
    wait_for_page_to_load(driver)

    set_input(driver, "query", "tags:tag1")
    check_num_datasets(driver, 2)

    set_input(driver, "query", "tags:nonexistent-tag")
    check_num_datasets(driver, 0)

    close_driver(driver)


def test_models_filter():
    driver = initialize_driver()
    host = get_host_for_selenium_testing()

    driver.get(f'{host}/explore')
    wait_for_page_to_load(driver)

    set_input(driver, "query", "max_models:5")
    check_num_datasets(driver, 4)

    set_input(driver, "query", "min_models:5")
    check_num_datasets(driver, 0)

    set_input(driver, "query", "min_models:2;max_models:5")
    check_num_datasets(driver, 4)

    close_driver(driver)


def test_configuration_filter():
    driver = initialize_driver()
    host = get_host_for_selenium_testing()

    driver.get(f'{host}/explore')
    wait_for_page_to_load(driver)

    set_input(driver, "query", "min_configs:10")
    check_num_datasets(driver, 4)

    set_input(driver, "query", "min_configs:30")
    check_num_datasets(driver, 0)

    set_input(driver, "query", "max_configs:50")
    check_num_datasets(driver, 4)

    set_input(driver, "query", "min_configs:5;max_configs:30")
    check_num_datasets(driver, 4)

    close_driver(driver)


def test_filters():
    driver = initialize_driver()
    host = get_host_for_selenium_testing()

    driver.get(f'{host}/explore')

    set_checkbox(driver, "by_valid_uvls", True)
    check_num_datasets(driver, 3)
    set_checkbox(driver, "by_valid_uvls", False)

    set_input(driver, "start_date", "2020-01-01")
    check_num_datasets(driver, 4)

    set_input(driver, "start_date", "2020-02-02")
    check_num_datasets(driver, 3)

    set_input(driver, "start_date", "2021-02-02")
    check_num_datasets(driver, 2)

    set_input(driver, "start_date", "2022-02-02")
    check_num_datasets(driver, 1)

    set_input(driver, "start_date", "2023-02-02")
    check_num_datasets(driver, 0)

    set_input(driver, "start_date", "2020-02-02")
    set_input(driver, "end_date", "2022-01-01")
    check_num_datasets(driver, 2)

    set_input(driver, "start_date", "")
    set_input(driver, "end_date", "")

    set_input(driver, "min_uvl", "3")
    set_input(driver, "max_uvl", "3")
    check_num_datasets(driver, 4)

    set_input(driver, "min_num_configurations", "25")
    check_num_datasets(driver, 0)

    set_input(driver, "min_num_configurations", "24")
    set_input(driver, "max_num_configurations", "25")
    check_num_datasets(driver, 4)

    close_driver(driver)


def test_publication_type():
    driver = initialize_driver()
    host = get_host_for_selenium_testing()

    driver.get(f'{host}/explore')

    set_input(driver, "publication_type", "asd")
    check_num_datasets(driver, 4)

    set_input(driver, "publication_type", "none")
    check_num_datasets(driver, 0)

    set_input(driver, "publication_type", "book")
    check_num_datasets(driver, 2)

    set_input(driver, "publication_type", "datamanagementplan")
    check_num_datasets(driver, 2)

    close_driver(driver)


test_query()


test_author_filter()


test_size_filters()


test_tags_filter()


test_models_filter()


test_configuration_filter()


test_filters()


test_publication_type()
